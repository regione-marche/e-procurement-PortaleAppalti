<!DOCTYPE validators PUBLIC
        "-//OpenSymphony Group//XWork Validator 1.0.2//EN"
        "http://www.opensymphony.com/xwork/xwork-validator-1.0.2.dtd">

<validators>
	<!-- NB: questa condizione e' una riduzione della validazione leggibile (^ = xor) -->
	<!-- in questo caso la validazione indica (non A e B != "") o (A e B = "")        -->
	<field name="ragioneSociale">
		<field-validator type="fieldexpression">
			<param name="expression"><![CDATA[!((
			ragioneSociale.trim().length() > 0 ||
			codiceFiscale.trim().length() > 0 || 
			partitaIVA.trim().length() > 0 ||
			tipoImpresa.trim().length() > 0) 
			^ ragioneSociale.trim().length() > 0)]]></param>
			<message key="localstrings.requiredstring" />
		</field-validator>
	</field>
	
	<!-- NB: questa condizione e' una riduzione della validazione leggibile (^ = xor) -->
	<!-- in questo caso la validazione indica (non A e B != "") o (A e B = "")        -->
	<field name="tipoImpresa">
		<field-validator type="fieldexpression">
			<param name="expression"><![CDATA[!((
			ragioneSociale.trim().length() > 0 ||
			codiceFiscale.trim().length() > 0 || 
			partitaIVA.trim().length() > 0 || 
			tipoImpresa.trim().length() > 0) 
			^ tipoImpresa.trim().length() > 0)]]></param>
			<message key="localstrings.requiredstring" />
		</field-validator>
	</field>
	
	<field name="nazione">
		<field-validator type="fieldexpression" >
			<param name="expression"><![CDATA[(
				("1".equals(ambitoTerritoriale.trim()))
				|| ("2".equals(ambitoTerritoriale.trim()) && nazione.trim().length() > 0)
				)]]></param>
			<message key="localstrings.requiredstring" />
		</field-validator>
	</field>

	<field name="codiceFiscale">
		<field-validator type="fieldexpression" short-circuit="true">
			<param name="expression"><![CDATA[!((
				ragioneSociale.trim().length() > 0 ||
				codiceFiscale.trim().length() > 0 || 
				partitaIVA.trim().length() > 0 ||
				tipoImpresa.trim().length() > 0) 
				^ ("2".equals(ambitoTerritoriale.trim())
				   || ("1".equals(ambitoTerritoriale.trim()) && codiceFiscale.trim().length() > 0))
				)]]></param>
			<message key="localstrings.requiredstring" />
		</field-validator>
	</field>
	
	<field name="idFiscaleEstero">
		<field-validator type="fieldexpression" >
			<param name="expression"><![CDATA[(
				("1".equals(ambitoTerritoriale.trim()))
				|| ("2".equals(ambitoTerritoriale.trim()) && idFiscaleEstero.trim().length() > 0)
				)]]></param>
			<message key="localstrings.requiredstring" />
		</field-validator>
	</field>

	<field name="strQuota">
		<field-validator type="regex">
<!-- 			<param name="expression"><![CDATA[[0-9]{1,2}]]></param> -->
			<param name="expression"><![CDATA[^\d+(\.\d+)?$]]></param>
			<message key="quotarange" />
		</field-validator>
		<field-validator type="fieldexpression" short-circuit="true">
			<param name="expression"><![CDATA[(
				(!quotaVisibile) || 
				(quotaVisibile && strQuota >= 0.0 && strQuota <= 100.0))]]></param>
			<message key="quotarange" />
		</field-validator>
	</field>
	
	<field name="strQuotaRTI">
		<field-validator type="regex">
<!-- 			<param name="expression"><![CDATA[[0-9]{1,2}]]></param> -->
			<param name="expression"><![CDATA[^\d+(\.\d+)?$]]></param>
			<message key="quotarangeRTI" />
		</field-validator>
		<field-validator type="fieldexpression" short-circuit="true">
			<param name="expression"><![CDATA[(
			    (!quotaRTIVisibile) ||
				(quotaRTIVisibile && strQuotaRTI >= 0.0 && strQuotaRTI <= 100.0))]]></param>
			<message key="quotarangeRTI" />
		</field-validator>
	</field>
		
</validators>