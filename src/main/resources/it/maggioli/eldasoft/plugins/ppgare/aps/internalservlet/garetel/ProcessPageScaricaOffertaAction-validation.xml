<!DOCTYPE validators PUBLIC
        "-//OpenSymphony Group//XWork Validator 1.0.2//EN"
        "http://www.opensymphony.com/xwork/xwork-validator-1.0.2.dtd">

<validators>
	
	<field name="cognome">
		<field-validator type="requiredstring">
			<message key="localstrings.requiredstring" />
		</field-validator>
		<field-validator type="regex">
			<param name="expression"><![CDATA[^[a-zA-Z ]+$]]></param>
			<message key="localstrings.wrongCharacters" />
		</field-validator>
	</field> 
	
	<field name="nome">
		<field-validator type="requiredstring">
			<message key="localstrings.requiredstring" />
		</field-validator>
		<field-validator type="regex">
			<param name="expression"><![CDATA[^[a-zA-Z ]+$]]></param>
			<message key="localstrings.wrongCharacters" />
		</field-validator>
	</field>
	
	<field name="dataNascita">
		<field-validator type="requiredstring">
			<message key="localstrings.requiredstring" />
		</field-validator>
		<field-validator type="regex" short-circuit="true">
			<param name="expression"><![CDATA[[0-9]{2}/[0-9]{2}/(19|20)[0-9]{2}]]></param>
			<message key="localstrings.wrongDate" />
		</field-validator>
		<field-validator type="dateItaly">
			<message key="localstrings.wrongDate" />
		</field-validator>
	</field>
	
	<field name="comuneNascita">
		<field-validator type="requiredstring">
			<message key="localstrings.requiredstring" />
		</field-validator>
		<field-validator type="regex">
			<param name="expression"><![CDATA[^[a-zA-Z ]+$]]></param>
			<message key="localstrings.wrongCharacters" />
		</field-validator>
	</field>
	
<!-- 
 	<field name="sesso">
		<field-validator type="requiredstring">
			<message key="localstrings.requiredstring" />
		</field-validator>
	</field>
-->
	
	<field name="codiceFiscale">
		<field-validator type="requiredstring">
			<message key="localstrings.requiredstring" />
		</field-validator>
		<field-validator type="regex">
			<param name="expression"><![CDATA[^[a-zA-Z0-9]+$]]></param>
			<message key="localstrings.wrongCharacters" />
		</field-validator>
	</field>
	
	<field name="indirizzo">
		<field-validator type="requiredstring">
			<message key="localstrings.requiredstring" />
		</field-validator>
		<field-validator type="regex">
			<param name="expression"><![CDATA[^[a-zA-Z .']+$]]></param>
			<message key="localstrings.wrongCharacters" />
		</field-validator>
	</field>
	
	<field name="numCivico">
		<field-validator type="requiredstring">
			<message key="localstrings.requiredstring" />
		</field-validator>
		<field-validator type="regex">
			<param name="expression"><![CDATA[^[a-zA-Z0-9 /]+$]]></param>
			<message key="localstrings.wrongCharacters" />
		</field-validator>
	</field>
	
	<field name="cap">
		<field-validator type="requiredstring">
			<message key="localstrings.requiredstring" />
		</field-validator>
			<field-validator type="regex" short-circuit="true">
			<param name="expression"><![CDATA[[0-9]+]]></param>
			<message key="localstrings.wrongCharacters" />
		</field-validator>
	</field>
	
	<field name="comune">
		<field-validator type="requiredstring">
			<message key="localstrings.requiredstring" />
		</field-validator>
		<field-validator type="regex">
			<param name="expression"><![CDATA[^[a-zA-Z ]+$]]></param>
			<message key="localstrings.wrongCharacters" />
		</field-validator>
	</field>
	
	<field name="provincia">
		<field-validator type="fieldexpression">
			<param name="expression"><![CDATA[
			!(provincia.trim().length() > 0 ^ "ITALIA".equals(nazione.trim().toUpperCase())) || !(soggettoQualifica.trim().length() > 0 ||
			dataInizioIncarico.trim().length() > 0 || 
			dataFineIncarico.trim().length() > 0 || 
			cognome.trim().length() > 0 || 
			nome.trim().length() > 0 || 
			titolo.trim().length() > 0 || 
			codiceFiscale.trim().length() > 0 || 
			indirizzo.trim().length() > 0 || 
			numCivico.trim().length() > 0 || 
			cap.trim().length() > 0 || 
			comune.trim().length() > 0 || 
			provincia.trim().length() > 0 ||
			dataNascita.trim().length() > 0 ||
			comuneNascita.trim().length() > 0 ||
			provinciaNascita.trim().length() > 0 ||
			tipologiaAlboProf.trim().length() > 0 ||
			numIscrizioneAlboProf.trim().length() > 0 ||
			dataIscrizioneAlboProf.trim().length() > 0 ||
			provinciaIscrizioneAlboProf.trim().length() > 0 ||
			tipologiaCassaPrevidenza.trim().length() > 0 ||
			numMatricolaCassaPrevidenza.trim().length() > 0 ||
			note.trim().length() > 0)]]></param>
			<message key="localstrings.provinciaForNazioneEstera" />
		</field-validator>
	</field>
	
	<field name="nazione">
		<field-validator type="requiredstring">
			<message key="localstrings.requiredstring" />
		</field-validator>
		<field-validator type="regex">
			<param name="expression"><![CDATA[^[a-zA-Z ]+$]]></param>
			<message key="localstrings.wrongCharacters" />
		</field-validator>
	</field>
	
	
	<field name="soggettoQualifica">
		<field-validator type="fieldexpression" short-circuit="true">
			<param name="expression"><![CDATA[!(obbQualifica && soggettoQualifica.trim().length() == 0)]]></param>
				<message key="localstrings.requiredstring" />
		</field-validator>
	</field>

</validators>